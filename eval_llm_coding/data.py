"""Fill in a module description here"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_data.ipynb.

# %% auto 0
__all__ = ['generate_mixed_gaussian_data']

# %% ../nbs/00_data.ipynb 4
import numpy as np

# %% ../nbs/00_data.ipynb 5
def generate_mixed_gaussian_data(n_samples, means, covariances, weights):
    """
    Generates samples from a Gaussian Mixture Model.

    Parameters:
        n_samples (int): Total number of samples to generate.
        means (list of arrays): Means of the Gaussian components. Each element is a 1D array.
        covariances (list of arrays): Covariance matrices for the Gaussian components.
        weights (list of floats): Mixing weights for the components. Should sum to 1.

    Returns:
        X (ndarray): Generated sample data.
        y (ndarray): Component labels for each sample.
    """
    n_components = len(means)
    assert len(covariances) == n_components, "Mismatch in number of covariances and means."
    assert len(weights) == n_components, "Mismatch in number of weights and means."
    assert np.isclose(sum(weights), 1.0), "Weights should sum to 1."

    # Determine the number of samples per component
    samples_per_component = np.random.multinomial(n_samples, weights)

    # Generate samples for each component
    X = []
    y = []
    for i, (mean, cov, n) in enumerate(zip(means, covariances, samples_per_component)):
        component_samples = np.random.multivariate_normal(mean, cov, n)
        X.append(component_samples)
        y.extend([i] * n)  # Label each sample with its component index

    # Combine all samples and shuffle
    X = np.vstack(X)
    y = np.array(y)
    shuffle_indices = np.random.permutation(len(X))
    return X[shuffle_indices], y[shuffle_indices]

