# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_plot.ipynb.

# %% auto 0
__all__ = ['plot_2d_mix_guassian', 'plot_gaussian_ellipse']

# %% ../nbs/00_plot.ipynb 3
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.patches import Ellipse


# %% ../nbs/00_plot.ipynb 4
def plot_2d_mix_guassian(X, means, covariances, predictions=None):
    plt.figure(figsize=(10, 7))
    
    if predictions is not None:
        # Scatter plot of data points with cluster assignments
        plt.scatter(X[:, 0], X[:, 1], c=predictions, cmap='viridis', s=30, alpha=0.6, label="Data Points")
    
    # Plot Gaussian ellipses
    for i in range(len(means)):
        plot_gaussian_ellipse(means[i], covariances[i], edgecolor='red')
        plt.scatter(means[i][0], means[i][1], c='red', s=100, label=f"Cluster {i+1} Mean")
    
    plt.title("Gaussian Mixture Model Clustering (EM Algorithm)")
    plt.xlabel("Feature 1")
    plt.ylabel("Feature 2")
    plt.legend(loc="upper right")
    plt.grid()
    plt.show()


def plot_gaussian_ellipse(mean, covariance, ax=None, **kwargs):
    if ax is None:
        ax = plt.gca()
    eigvals, eigvecs = np.linalg.eigh(covariance)
    order = eigvals.argsort()[::-1]
    eigvals, eigvecs = eigvals[order], eigvecs[:, order]
    angle = np.degrees(np.arctan2(*eigvecs[:, 0][::-1]))
    width, height = 2 * np.sqrt(eigvals)
    # The angle is kwarg, openai make a mistake here
    ellipse = Ellipse(mean, width, height, angle=angle, **kwargs)
    ax.add_patch(ellipse)
    ellipse.set_alpha(0.3)

